import json
import math
import requests
import sqlite3 as sl
import telebot
from io import BytesIO
from PIL import Image
from datetime import datetime

from PIL.ImageDraw import ImageDraw
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto
from telebot.types import ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton

with open("Config.json") as f:
    config = json.load(f)
    Token = config.get("telegram_token")
    database = config.get("database_path")
    geocoder_api = config.get("geocoder_api")
bot = telebot.TeleBot(Token)
con = sl.connect(database, check_same_thread=False)
dict_users = {}
dict_administrators = {}
with con:
    administrators = con.execute("SELECT * FROM –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã")
    print(administrators.fetchall())

    menu = con.execute("SELECT –ù–∞–∑–≤–∞–Ω–∏–µ FROM '–†–∞–∑–¥–µ–ª—ã –ú–µ–Ω—é'")
    menu_categories = []
    for categories in menu.fetchall():
        menu_categories.append(categories[0])
    dict_users["–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ú–µ–Ω—é"] = menu_categories
    del menu_categories, menu, categories, f


def category(case):
    if case == "–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞":
        hello_board = InlineKeyboardMarkup()
        menu = InlineKeyboardButton("üìÇ–ú–µ–Ω—é", callback_data=json.dumps([2, "menu"]))
        profile = InlineKeyboardButton("ü§ó–ü—Ä–æ—Ñ–∏–ª—å", callback_data=json.dumps([2, "profile"]))
        my_orders = InlineKeyboardButton("üìã–ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data=json.dumps([2, "orders"]))
        hello_board.add(menu, profile, my_orders, row_width=1)
        return hello_board
    if case == "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–Ω—é":
        updated_menu, flag = [], 1
        with con:
            data = con.execute('SELECT –ù–∞–∑–≤–∞–Ω–∏–µ FROM "–†–∞–∑–¥–µ–ª—ã –ú–µ–Ω—é"')
            for categories in data.fetchall():
                updated_menu.append(categories[0])
            if dict_users["–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ú–µ–Ω—é"] is not updated_menu:
                dict_users["–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ú–µ–Ω—é"] = updated_menu
            del updated_menu, categories
        markup_category = InlineKeyboardMarkup()
        for categories in dict_users["–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ú–µ–Ω—é"]:
            index = dict_users["–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ú–µ–Ω—é"].index(categories)
            markup_category.add(InlineKeyboardButton(categories, callback_data=json.dumps([flag, index])))
        del categories
        return markup_category


def products(data, user_id):
    temp, groups = [], []
    with con:
        data = con.execute(f'SELECT –ò–º—è, –ö–∞—Ä—Ç–∏–Ω–∫–∞, –û–ø–∏—Å–∞–Ω–∏–µ, –°—Ç–æ–∏–º–æ—Å—Ç—å FROM –ü–æ–∑–∏—Ü–∏–∏ '
                           f'INNER JOIN [–†–∞–∑–¥–µ–ª—ã –ú–µ–Ω—é] ON –ü–æ–∑–∏—Ü–∏–∏.[ID —Ä–∞–∑–¥–µ–ª–∞] = [–†–∞–∑–¥–µ–ª—ã –ú–µ–Ω—é]."ID"'
                           f'WHERE [–†–∞–∑–¥–µ–ª—ã –ú–µ–Ω—é]."–ù–∞–∑–≤–∞–Ω–∏–µ" = "{data}"')

    for product in data.fetchall():
        name = product[0]
        image = Image.open(BytesIO(product[1]))
        description = product[2]
        cost = product[3]
        temp.append([name, image, description, cost])
    # temp = [[],[],[],....,[]]
    step = 0
    for i in range(math.ceil(len(temp) / 2)):
        groups.append(temp[step:step + 2])
        step += 2
    # groups = [[[],[]], [[],[]], ...., [[],[]]] —É–ø–∞–∫–æ–≤–∞–Ω–Ω—ã–π –≤ zip –∏—Ç–µ—Ä–∞—Ç–æ—Ä—ã
    if user_id not in dict_users.keys():
        dict_users.update({user_id: {"groups": groups}})
    else:
        dict_users[user_id]["groups"] = groups
    select_product(user_id, count=0)


def select_product(user_id, count):
    data = dict_users[user_id]["groups"][count]  # data = [[], []]
    for element in data:
        index = data.index(element)
        case = 0
        name = element[0]
        image = element[1]
        description = element[2]
        cost = element[3]
        caption = f"{name}\n{description}\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {cost}"
        if element == data[-1]:
            case = "Next"
            if count == (len(dict_users[user_id]["groups"]) - 1):
                case = "Menu"
        bot.send_photo(chat_id=user_id, photo=image, caption=caption,
                       reply_markup=select_count(count=1, case=case, group_id=count, group_el=index))


def select_count(count, case, group_id, group_el):
    data = [3, count, case, group_id, group_el]
    order_count = InlineKeyboardMarkup()
    button_decrease = InlineKeyboardButton("‚ûñ", callback_data=json.dumps(data + ["-"]))
    number = InlineKeyboardButton(f"{count}", callback_data=json.dumps(data))
    button_increase = InlineKeyboardButton("‚ûï", callback_data=json.dumps(data + ["+"]))
    cart_button = InlineKeyboardButton("–ö–æ—Ä–∑–∏–Ω–∞", callback_data=json.dumps(data + ["cart"]))
    add_button = InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å", callback_data=json.dumps(data + ["add"]))
    next_button = InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–µ", callback_data=json.dumps(data + ["*"]))

    order_count.row(button_decrease, number, button_increase)
    if case == 0:
        order_count.add(add_button)
    if case == "Next":
        order_count.row(cart_button, add_button, next_button)
    if case == "Menu":
        data = [2, "menu"]
        menu = InlineKeyboardButton("–ú–µ–Ω—é", callback_data=json.dumps(data))
        order_count.row(cart_button, add_button, menu)
    return order_count


def cart_processing(case, user_id):
    menu = InlineKeyboardButton("–ú–µ–Ω—é", callback_data=json.dumps([2, "menu"]))
    if case == "show":
        data = [4, "change", "accept"]
        show_buttons = InlineKeyboardMarkup()
        change_button = InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å", callback_data=json.dumps([data[0], data[1]]))
        accept_order = InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=json.dumps([data[0], data[2]]))
        show_buttons.row(change_button, menu, accept_order)
        return show_buttons
    if case == "change":
        data = [4, "–ò–∑–º–µ–Ω–∏—Ç—å", "back", "<", ">", "x"]
        change_buttons = InlineKeyboardMarkup()
        accept_changes = InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å", callback_data=json.dumps([data[0], data[1]]))
        back_button = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=json.dumps([data[0], data[2]]))
        if "–ò–∑–º–µ–Ω—ë–Ω–Ω–∞—è –ö–æ—Ä–∑–∏–Ω–∞" not in dict_users[user_id].keys() or dict_users[user_id]["–ò–∑–º–µ–Ω—ë–Ω–Ω–∞—è –ö–æ—Ä–∑–∏–Ω–∞"] is None:
            dict_users[user_id]["–ò–∑–º–µ–Ω—ë–Ω–Ω–∞—è –ö–æ—Ä–∑–∏–Ω–∞"] = dict_users[user_id]["–ö–æ—Ä–∑–∏–Ω–∞"].copy()
        for el in dict_users[user_id]["–ò–∑–º–µ–Ω—ë–Ω–Ω–∞—è –ö–æ—Ä–∑–∏–Ω–∞"]:
            cost = round(el[1] * el[2], 2)
            amount = el[2]
            index = dict_users[user_id]["–ò–∑–º–µ–Ω—ë–Ω–Ω–∞—è –ö–æ—Ä–∑–∏–Ω–∞"].index(el)
            button_decrease = InlineKeyboardButton("<", callback_data=json.dumps([data[0], data[3], index]))
            button_increase = InlineKeyboardButton(">", callback_data=json.dumps([data[0], data[4], index]))
            button_delete = InlineKeyboardButton("X", callback_data=json.dumps([data[0], data[5], index]))
            amount_btn = InlineKeyboardButton(f"{index + 1}: {amount} —à—Ç.", callback_data=json.dumps([4]))
            cost_btn = InlineKeyboardButton(f"{cost}", callback_data=json.dumps([4]))
            change_buttons.row(button_decrease, amount_btn, cost_btn, button_increase, button_delete)
            if el is dict_users[user_id]["–ò–∑–º–µ–Ω—ë–Ω–Ω–∞—è –ö–æ—Ä–∑–∏–Ω–∞"][-1]:
                change_buttons.row(back_button, menu, accept_changes)
        if len(dict_users[user_id]["–ò–∑–º–µ–Ω—ë–Ω–Ω–∞—è –ö–æ—Ä–∑–∏–Ω–∞"]) == 0:
            change_buttons.row(back_button, menu, accept_changes)
        return change_buttons
    if case == "Menu":
        back_to_menu = InlineKeyboardMarkup()
        back_to_menu.add(menu)
        return back_to_menu


def order_accepting(case, chat_id):
    if case == "Hide":
        return None

    elif case == "confirmation":
        flag = 4
        order = InlineKeyboardMarkup()
        order_is_right = InlineKeyboardButton("–í–µ—Ä–Ω–æ", callback_data=json.dumps([flag, "right"]))
        order_not_right = InlineKeyboardButton("–ù–µ –≤–µ—Ä–Ω–æ", callback_data=json.dumps([flag, "back"]))
        order.row(order_not_right, order_is_right)
        return order

    elif case == "delivery":
        flag = 5
        delivery = InlineKeyboardMarkup()
        by_delivery = InlineKeyboardButton("–î–æ—Å—Ç–∞–≤–∫–∞", callback_data=json.dumps([flag, "by_delivery"]))
        by_users_self = InlineKeyboardButton("–°–∞–º–æ–≤—ã–≤–æ–∑", callback_data=json.dumps([flag, "self"]))
        in_restaurant = InlineKeyboardButton("–í –∑–∞–≤–µ–¥–µ–Ω–∏–∏", callback_data=json.dumps([flag, "restaurant"]))
        delivery.add(by_delivery, by_users_self, in_restaurant)
        return delivery

    elif case == "Payment":
        flag = 5
        payment = InlineKeyboardMarkup()
        cash = InlineKeyboardButton("–ù–∞–ª–∏—á–Ω—ã–º–∏", callback_data=json.dumps([flag, "Cash"]))
        card = InlineKeyboardButton("–ö–∞—Ä—Ç–æ–π", callback_data=json.dumps([flag, "Card"]))
        payment.row(cash, card)
        return payment

    elif case == "address":
        flag = 5
        address = InlineKeyboardMarkup()
        geolocation = InlineKeyboardButton("–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è", callback_data=json.dumps([flag, "Geo"]))
        manual_input = InlineKeyboardButton("–í—Ä—É—á–Ω—É—é", callback_data=json.dumps([flag, "Manual"]))
        address.row(manual_input, geolocation)
        return address

    elif case == "Geolocation":
        location = ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        send_geolocation = KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ì–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)
        location.add(send_geolocation)
        return location

    elif case == "Address confirmation":
        flag = 5
        address_is_ok = InlineKeyboardMarkup()
        no = InlineKeyboardButton("–ù–µ—Ç", callback_data=json.dumps([flag, 'No']))
        yes = InlineKeyboardButton("–î–∞", callback_data=json.dumps([flag, 'Yes']))
        address_is_ok.row(no, yes)
        return address_is_ok


def order_info(user_id, case):
    if case == "current order":
        number, order = None, None
        if "–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ" in dict_users[user_id].keys():
            with con:
                number = con.execute(f'SELECT –ó–∞–∫–∞–∑—ã.ID FROM –ó–∞–∫–∞–∑—ã INNER JOIN –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ '
                                     f'ON –ó–∞–∫–∞–∑—ã.[ID –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è] = –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏.ID '
                                     f'WHERE –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏.[ID TG] = {user_id} ORDER BY –ó–∞–∫–∞–∑—ã.ID DESC LIMIT 1;')
                is_phone = con.execute(f'SELECT –¢–µ–ª–µ—Ñ–æ–Ω FROM –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ '
                                       f'WHERE "ID TG" = {user_id}')
            telephone = is_phone.fetchall()[0][0]
            number = number.fetchall()[0][0]

            order = f"\n"

            for information in dict_users[user_id]["–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ"].items():
                order += information[0] + " : " + information[1] + "\n"
            if telephone is not None:
                order += f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ : {telephone}"
            order += "\n"
            if dict_users[user_id]["–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ"]["–°–ø–æ—Å–æ–± –î–æ—Å—Ç–∞–≤–∫–∏"] == "–î–æ—Å—Ç–∞–≤–∫–∞":
                order += "–î–æ—Å—Ç–∞–≤–∫–∞ –≤ —Ç–µ—á–µ–Ω–∏–∏: 30 ¬± 5 –º–∏–Ω—É—Ç\n"

        if number is not None:
            text = f"–í–∞—à –∑–∞–∫–∞–∑: ‚Ññ{number}\n\n"
        else:
            text = "–í–∞—à –∑–∞–∫–∞–∑:\n\n"

        indexing = 1
        total = 0
        for position in dict_users[user_id]["–ö–æ—Ä–∑–∏–Ω–∞"]:
            cost = round(position[1] * position[2], 2)
            text += f"{indexing}. {position[0]}, –∫–æ–ª-–≤–æ: {position[2]} —Å—É–º–º–∞: {cost}.BYN\n"
            indexing += 1
            total += cost
        if order is not None:
            text += order
        text += f"–ò—Ç–æ–≥–æ: {round(total, 2)} BYN"
        return text
    if case == "show orders":
        orders_dict = {}
        with con:
            orders = con.execute(f"SELECT –ó–∞–∫–∞–∑—ã.ID, –ü–æ–∑–∏—Ü–∏–∏.–ò–º—è, [–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞].–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ, –ü–æ–∑–∏—Ü–∏–∏.–°—Ç–æ–∏–º–æ—Å—Ç—å, "
                                 f"–ó–∞–∫–∞–∑—ã.–°—Ç–æ–∏–º–æ—Å—Ç—å, –ó–∞–∫–∞–∑—ã.–í—Ä–µ–º—è FROM –ü–æ–∑–∏—Ü–∏–∏ "
                                 f"INNER JOIN [–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞] on [–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞].[ID –ø–æ–∑–∏—Ü–∏–∏] = –ü–æ–∑–∏—Ü–∏–∏.ID "
                                 f"INNER JOIN –ó–∞–∫–∞–∑—ã ON [–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞].[ID –∑–∞–∫–∞–∑–∞] = –ó–∞–∫–∞–∑—ã.ID "
                                 f"INNER JOIN –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ON –ó–∞–∫–∞–∑—ã.[ID –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è] = –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏.ID "
                                 f"WHERE –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏.[ID TG] = {user_id}")
        for product in orders.fetchall():
            if product[0] not in orders_dict.keys():
                orders_dict.update({product[0]: {"–í—Ä–µ–º—è": product[5], "–ü–æ–∑–∏—Ü–∏–∏": [product[1:5]]}})
            else:
                orders_dict[product[0]]["–ü–æ–∑–∏—Ü–∏–∏"] += [product[1:5]]
        text = f"–í–∞—à–∏ –ó–∞–∫–∞–∑—ã:\n\n"
        for order in orders_dict.items():
            total = 0
            text += f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order[0]}\n"
            text += f"–û—Ñ–æ—Ä–º–ª–µ–Ω: {order[1]['–í—Ä–µ–º—è']}\n"
            for products in order[1]["–ü–æ–∑–∏—Ü–∏–∏"]:
                index = order[1]["–ü–æ–∑–∏—Ü–∏–∏"].index(products) + 1
                text += f"{index}.{products[0]}, –∫–æ–ª-–≤–æ:{products[1]}\n"
                total = products[3]
            text += f"–ù–∞ —Å—É–º–º—É: {total}.BYN\n\n"
        return text


def order_to_base(user_id):
    if "–¢–µ–ª–µ—Ñ–æ–Ω" in dict_users[user_id]["–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ"].keys():
        telephone = dict_users[user_id]["–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ"]["–¢–µ–ª–µ—Ñ–æ–Ω"]
    else:
        telephone = None
    address = None
    if dict_users[user_id]["–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ"]["–°–ø–æ—Å–æ–± –î–æ—Å—Ç–∞–≤–∫–∏"] == "–î–æ—Å—Ç–∞–≤–∫–∞":
        street = dict_users[user_id]["–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ"]["–£–ª–∏—Ü–∞"]
        house = dict_users[user_id]["–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ"]["–î–æ–º"]
        apartment = dict_users[user_id]["–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ"]["–ö–≤–∞—Ä—Ç–∏—Ä–∞"]
        address = street + ", " + house + ", " + apartment
    cost = sum(x[1] * x[2] for x in dict_users[user_id]["–ö–æ—Ä–∑–∏–Ω–∞"])
    cost = round(cost, 2)
    payment = dict_users[user_id]["–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ"]["–°–ø–æ—Å–æ–± –û–ø–ª–∞—Ç—ã"]
    delivery = dict_users[user_id]["–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ"]["–°–ø–æ—Å–æ–± –î–æ—Å—Ç–∞–≤–∫–∏"]
    current_date_time = datetime.now().replace(microsecond=0)
    with con:
        if telephone is not None:
            con.execute(f'UPDATE OR IGNORE –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ set –¢–µ–ª–µ—Ñ–æ–Ω = (?)'
                        f'WHERE [ID TG] = {user_id}', [telephone])
        con.execute(f'INSERT OR IGNORE INTO –ó–∞–∫–∞–∑—ã ("ID –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", –í—Ä–µ–º—è, –ê–¥—Ä–µ—Å—Å, –°—Ç–æ–∏–º–æ—Å—Ç—å, –û–ø–ª–∞—Ç–∞, –î–æ—Å—Ç–∞–≤–∫–∞) '
                    f'values ((SELECT ID FROM –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ WHERE [ID TG] = {user_id}),'
                    f'("{current_date_time}"),?,?,?,?)',
                    [address, cost, payment, delivery])
        for product in dict_users[user_id]["–ö–æ—Ä–∑–∏–Ω–∞"]:
            name = product[0]
            con.execute(f'INSERT OR IGNORE INTO [–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞] (–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ, "ID –∑–∞–∫–∞–∑–∞", "ID –ø–æ–∑–∏—Ü–∏–∏") '
                        f'VALUES (?,(SELECT –ó–∞–∫–∞–∑—ã.ID FROM –ó–∞–∫–∞–∑—ã '
                        f'INNER JOIN –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ON –ó–∞–∫–∞–∑—ã."ID –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" = –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏.ID '
                        f'WHERE –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏."ID TG" = {user_id} ORDER BY –ó–∞–∫–∞–∑—ã.ID DESC LIMIT 1),'
                        f'(SELECT ID FROM –ü–æ–∑–∏—Ü–∏–∏ WHERE –ò–º—è = "{name}"))', [product[2]])


@bot.message_handler(content_types=['location'])
def location(geodata):
    user_id = geodata.from_user.id
    chat_id = geodata.chat.id
    message_id = geodata.message_id
    if "–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ" in dict_users[user_id].keys() and dict_users[user_id]["–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ"] is not None:
        longitude = geodata.location.longitude
        latitude = geodata.location.latitude
        url = f"https://geocode-maps.yandex.ru/1.x/?apikey={geocoder_api}&format=json&geocode={longitude},{latitude}"
        response = requests.get(url).json()
        take_address = ['response', 'GeoObjectCollection', 'featureMember', 0, 'GeoObject', 'metaDataProperty',
                        'GeocoderMetaData', 'Address', 'formatted']
        for x in take_address:
            response = response[x]
        response = response.split(', ')  # ['–ë–µ–ª–∞—Ä—É—Å—å', '–ú–∏–Ω—Å–∫', '—É–ª–∏—Ü–∞ –§—Ä–∞–Ω—Ü–∏—Å–∫–∞ –°–∫–æ—Ä–∏–Ω—ã', '8–∫1']
        question = f"–í–∞—à –∞–¥—Ä–µ—Å {','.join(response[2:])}?"
        if len(response) == 3:
            dict_users[user_id]["–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ"].update({"–£–ª–∏—Ü–∞": response[2]})
        else:
            dict_users[user_id]["–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ"].update({"–£–ª–∏—Ü–∞": response[2], "–î–æ–º": response[3]})
        bot.send_message(chat_id=chat_id, text=question,
                         reply_markup=order_accepting(case="Address confirmation", chat_id=user_id))


@bot.message_handler(content_types=['text'])
def start(message):
    user_id = message.from_user.id
    name = message.from_user.first_name
    side_menu = ['/start', '/menu', '/card', '/orders']

    if message.text in side_menu:
        with con:  # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–∞–∑–µ, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –∑–∞–ø–∏—Å—å –≤–æ–∑–º–æ–∂–Ω–æ–π –æ –Ω—ë–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            searching_user = con.execute('SELECT ID, –ò–º—è, "ID TG" FROM –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ WHERE "ID TG" = ?', [user_id])
            if len(searching_user.fetchall()) == 0:
                con.execute('INSERT OR IGNORE INTO –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–ò–º—è, "ID TG") values (?, ?)', [name, user_id])
                photos = bot.get_user_profile_photos(user_id)
                if photos.total_count > 0:
                    photo = photos.photos[0][-1]
                    file_id = photo.file_id
                    file_info = bot.get_file(file_id)
                    file_path = file_info.file_path
                    avatar_url = f"https://api.telegram.org/file/bot{Token}/{file_path}"
                    response = requests.get(avatar_url)
                if response.status_code == 200:
                    avatar = response.content
                    con.execute(f'UPDATE OR IGNORE –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ SET –ê–≤–∞—Ç–∞—Ä–∫–∞ = ? '
                                f'WHERE –ò–º—è = "{name}" AND "ID TG" = {user_id}', [sl.Binary(avatar)])
            del searching_user
        if message.text == '/start':
            if user_id not in dict_users.keys():
                bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç ü§© {name}!üòç\n"
                                                  f"–ú—ã —Ä–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å")
            bot.send_message(message.chat.id,
                             'üì≤–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª', reply_markup=category(case="–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"))
        if message.text == '/menu':
            bot.send_message(message.chat.id,
                             '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –ú–µ–Ω—é ‚¨áÔ∏è', reply_markup=category(case="–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–Ω—é"))
        if message.text == '/card':
            if user_id in dict_users.keys() and "–ö–æ—Ä–∑–∏–Ω–∞" in dict_users[user_id].keys():
                text = order_info(user_id, case="current order")
                bot.send_message(message.chat.id, text=text, reply_markup=cart_processing(case="show", user_id=user_id))
            else:
                bot.send_message(message.chat.id, text="–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é",
                                 reply_markup=cart_processing(case="Menu", user_id=user_id))
        if message.text == '/orders':
            text = order_info(user_id, case="show orders")
            bot.send_message(message.chat.id, text=text)

    if user_id in dict_users.keys() and "–¢–µ–ª–µ—Ñ–æ–Ω" in dict_users[user_id].keys():
        if dict_users[user_id]["–¢–µ–ª–µ—Ñ–æ–Ω"] is None:
            with con:
                con.execute(f'UPDATE OR IGNORE –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ '
                            f'SET –¢–µ–ª–µ—Ñ–æ–Ω = "{message.text}" '
                            f'WHERE "ID TG" = {user_id}')
            bot.send_message(message.chat.id,
                             '–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã\nüì≤–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª',
                             reply_markup=category(case="–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"))
            del dict_users[user_id]["–¢–µ–ª–µ—Ñ–æ–Ω"]

    if user_id in dict_users.keys() and "–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ" in dict_users[user_id].keys():
        hide_keyboard = ReplyKeyboardRemove()
        text = ""
        finished_order = False
        if dict_users[user_id]["–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ"]["–°–ø–æ—Å–æ–± –î–æ—Å—Ç–∞–≤–∫–∏"] == "–î–æ—Å—Ç–∞–≤–∫–∞":
            if "–£–ª–∏—Ü–∞" not in dict_users[user_id]["–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ"].keys():
                dict_users[user_id]["–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ"].update({"–£–ª–∏—Ü–∞": message.text})
                text = "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–º–∞"
            elif "–î–æ–º" not in dict_users[user_id]["–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ"].keys():
                dict_users[user_id]["–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ"].update({"–î–æ–º": message.text})
                text = "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã"
            elif "–ö–≤–∞—Ä—Ç–∏—Ä–∞" not in dict_users[user_id]["–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ"].keys():
                dict_users[user_id]["–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ"].update({"–ö–≤–∞—Ä—Ç–∏—Ä–∞": message.text})
                with con:
                    is_phone = con.execute(f'SELECT –¢–µ–ª–µ—Ñ–æ–Ω FROM –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ '
                                           f'WHERE "ID TG" = {user_id}')
                    telephone = is_phone.fetchall()[0][0]
                    if telephone is not None:
                        order_to_base(user_id)
                        text = order_info(user_id, case="current order")
                        finished_order = True

                    else:
                        text = "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –¢–µ–ª–µ—Ñ–æ–Ω–∞"
            elif "–¢–µ–ª–µ—Ñ–æ–Ω" not in dict_users[user_id]["–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ"].keys() and not finished_order:
                dict_users[user_id]["–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ"].update({"–¢–µ–ª–µ—Ñ–æ–Ω": message.text})
                order_to_base(user_id)
                text = order_info(user_id, case="current order")
                finished_order = True

        elif dict_users[user_id]["–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ"]["–°–ø–æ—Å–æ–± –î–æ—Å—Ç–∞–≤–∫–∏"] == "–°–∞–º–æ–≤—ã–≤–æ–∑":
            dict_users[user_id]["–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ"].update({"–¢–µ–ª–µ—Ñ–æ–Ω": message.text})
            order_to_base(user_id)
            text = order_info(user_id, case="current order")
            finished_order = True

        elif dict_users[user_id]["–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ"]["–°–ø–æ—Å–æ–± –î–æ—Å—Ç–∞–≤–∫–∏"] == "–í –∑–∞–≤–µ–¥–µ–Ω–∏–∏":
            if "–ù–æ–º–µ—Ä —Å—Ç–æ–ª–∞" not in dict_users[user_id]["–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ"].keys():
                dict_users[user_id]["–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ"].update({"–ù–æ–º–µ—Ä —Å—Ç–æ–ª–∞": message.text})
                with con:
                    is_phone = con.execute(f'SELECT –¢–µ–ª–µ—Ñ–æ–Ω FROM –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ '
                                           f'WHERE "ID TG" = {user_id}')
                    telephone = is_phone.fetchall()[0][0]
                    if telephone is not None:
                        order_to_base(user_id)
                        text = order_info(user_id, case="current order")
                        finished_order = True
                    else:
                        text = "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
            elif "–¢–µ–ª–µ—Ñ–æ–Ω" not in dict_users[user_id]["–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ"].keys() and not finished_order:
                dict_users[user_id]["–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ"].update({"–¢–µ–ª–µ—Ñ–æ–Ω": message.text})
                order_to_base(user_id)
                text = order_info(user_id, case="current order")
                finished_order = True

        if text != "":
            bot.send_message(chat_id=user_id, text=text, reply_markup=hide_keyboard)
        if finished_order:
            del dict_users[user_id]["–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ"], dict_users[user_id]["–ö–æ—Ä–∑–∏–Ω–∞"]


@bot.callback_query_handler(func=lambda call: True)
def query_handler(call):
    bot.answer_callback_query(callback_query_id=call.id, )
    id = call.message.chat.id
    call.data = json.loads(call.data)
    flag = call.data[0]
    data = []

    if len(call.data) > 1:
        data = call.data[1:]

    if flag == 1:
        index = data[0]
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text="–í—ã–±–∏—Ä–∞–π—Ç–µ",
                              reply_markup=products(dict_users["–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ú–µ–Ω—é"][index], id))

    if flag == 2:
        operation = data[0]
        if operation == "menu":
            try:
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –ú–µ–Ω—é ‚¨áÔ∏è',
                                      reply_markup=category(case="–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–Ω—é"))
            except:
                bot.send_message(chat_id=call.message.chat.id,
                                 text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –ú–µ–Ω—é ‚¨áÔ∏è',
                                 reply_markup=category(case="–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–Ω—é"))
        elif operation == "profile":
            with con:
                user_profile = con.execute(f'SELECT * FROM –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ WHERE [ID TG] = {id}')
                user_orders = con.execute(f'SELECT COUNT(*) from –ó–∞–∫–∞–∑—ã '
                                          f'INNER JOIN –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ON –ó–∞–∫–∞–∑—ã."ID –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" = –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏.ID '
                                          f'WHERE "ID TG" = {id}')
                profile_keyboard = InlineKeyboardMarkup()
                request_phone = InlineKeyboardButton("üì±–í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä", callback_data=json.dumps([2, "phone"]))
                menu = InlineKeyboardButton("–ú–µ–Ω—éü•ô", callback_data=json.dumps([2, "menu"]))
                for information in user_profile.fetchall():
                    name = information[1]
                    phone = information[2]
                    image = Image.open(BytesIO(information[3]))
                user_orders = user_orders.fetchall()[0][0]
                image = image.resize((350, 380))
                no_phone = False
                caption = f"\n\n–ò–º—è: {name}\n"
                if phone is None:
                    caption += f"–¢–µ–ª–µ—Ñ–æ–Ω: –ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\n"
                    no_phone = True
                    profile_keyboard.row(request_phone, menu)
                else:
                    caption += f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
                    profile_keyboard.row(menu)
                caption += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {user_orders}"
                if no_phone:
                    caption += "\n\n–ù–µ —Ö–æ—Ç–∏—Ç–µ –ª–∏ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞?"
                bot.send_photo(chat_id=id, photo=image, caption=caption, reply_markup=profile_keyboard)
        elif operation == "orders":
            text = order_info(id, case="show orders")
            bot.send_message(id, text=text)
        elif operation == "phone":
            dict_users.update({id: {"–¢–µ–ª–µ—Ñ–æ–Ω": None}})
            bot.send_message(id, text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n–í —Ñ–æ—Ä–º–∞—Ç–µ: +375251234567")

    if flag == 3:
        count, case, group_id, group_el, operation = data[0], data[1], data[2], data[3], data[4]
        configuration = ["-", "+", "*"]
        if operation in configuration:
            if operation == "-":
                if count > 0:
                    count -= 1
            elif operation == "+":
                count += 1
            elif operation == "*":
                next_group = group_id + 1
                case = 0
                select_product(id, count=next_group)
            bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                          reply_markup=select_count(count, case, group_id, group_el))
        elif operation == "add":
            if count != 1:
                count = 1
                bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                              reply_markup=select_count(count, case, group_id, group_el))
            name = dict_users[id]["groups"][group_id][group_el][0]
            price = dict_users[id]["groups"][group_id][group_el][3]
            bot.send_message(chat_id=call.message.chat.id,
                             text=f'–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ:\n'
                                  f'{name}: {count} —à—Ç. –Ω–∞ —Å—É–º–º—É: {round(count * price, 2)}')
            if "–ö–æ—Ä–∑–∏–Ω–∞" not in dict_users[id].keys():
                dict_users[id].update({"–ö–æ—Ä–∑–∏–Ω–∞": [[name, price, count]]})
            else:
                item = next((x for x in dict_users[id]["–ö–æ—Ä–∑–∏–Ω–∞"] if x[0] == name), None)
                if item:
                    item[2] += count
                else:
                    dict_users[id]["–ö–æ—Ä–∑–∏–Ω–∞"] += [[name, price, count]]
        elif operation == "cart":
            if "–ö–æ—Ä–∑–∏–Ω–∞" not in dict_users[id].keys() or dict_users[id]["–ö–æ—Ä–∑–∏–Ω–∞"] is None:
                bot.send_message(chat_id=call.message.chat.id,
                                 text='–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞')
            else:
                text = order_info(id, case="current order")
                bot.send_message(chat_id=call.message.chat.id,
                                 text=text,
                                 reply_markup=cart_processing(case="show", user_id=id))

    if flag == 4:
        operation = data[0]
        index = 0
        if len(data) > 1:
            index = data[1]
        configuration = ["change", "<", ">", "x", "back"]
        if operation in configuration:
            case = None
            if operation == "change":
                case = "change"
            elif operation == "<":
                case = "change"
                amount = dict_users[id]["–ò–∑–º–µ–Ω—ë–Ω–Ω–∞—è –ö–æ—Ä–∑–∏–Ω–∞"][index][2]
                amount -= 1
                if amount >= 0:
                    dict_users[id]["–ò–∑–º–µ–Ω—ë–Ω–Ω–∞—è –ö–æ—Ä–∑–∏–Ω–∞"][index][2] = amount
            elif operation == ">":
                case = "change"
                amount = dict_users[id]["–ò–∑–º–µ–Ω—ë–Ω–Ω–∞—è –ö–æ—Ä–∑–∏–Ω–∞"][index][2]
                amount += 1
                dict_users[id]["–ò–∑–º–µ–Ω—ë–Ω–Ω–∞—è –ö–æ—Ä–∑–∏–Ω–∞"][index][2] = amount
            elif operation == "x":
                case = "change"
                del dict_users[id]["–ò–∑–º–µ–Ω—ë–Ω–Ω–∞—è –ö–æ—Ä–∑–∏–Ω–∞"][index]
            elif operation == "back":
                case = "show"
                if "–ò–∑–º–µ–Ω—ë–Ω–Ω–∞—è –ö–æ—Ä–∑–∏–Ω–∞" in dict_users[id].keys():
                    del dict_users[id]["–ò–∑–º–µ–Ω—ë–Ω–Ω–∞—è –ö–æ—Ä–∑–∏–Ω–∞"]
            bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                          reply_markup=cart_processing(case=case, user_id=id))
        elif operation == "–ò–∑–º–µ–Ω–∏—Ç—å":
            if len(dict_users[id]["–ò–∑–º–µ–Ω—ë–Ω–Ω–∞—è –ö–æ—Ä–∑–∏–Ω–∞"]) == 0:
                del dict_users[id]["–ò–∑–º–µ–Ω—ë–Ω–Ω–∞—è –ö–æ—Ä–∑–∏–Ω–∞"]
                del dict_users[id]["–ö–æ—Ä–∑–∏–Ω–∞"]
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text="–ü–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞\n"
                                           "–í–µ—Ä–Ω–∏—Ç–µ—Å—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤ –ú–µ–Ω—é",
                                      reply_markup=cart_processing(case="Menu", user_id=id))
            else:
                dict_users[id]["–ö–æ—Ä–∑–∏–Ω–∞"] = dict_users[id]["–ò–∑–º–µ–Ω—ë–Ω–Ω–∞—è –ö–æ—Ä–∑–∏–Ω–∞"]
                temp = []
                for el in dict_users[id]["–ö–æ—Ä–∑–∏–Ω–∞"]:
                    if el[2] != 0:
                        temp.append(el)
                dict_users[id]["–ö–æ—Ä–∑–∏–Ω–∞"] = temp

                if len(dict_users[id]["–ö–æ—Ä–∑–∏–Ω–∞"]) == 0:
                    del dict_users[id]["–ö–æ—Ä–∑–∏–Ω–∞"], dict_users[id]["–ò–∑–º–µ–Ω—ë–Ω–Ω–∞—è –ö–æ—Ä–∑–∏–Ω–∞"]
                    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                          text="–ü–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞\n"
                                               "–í–µ—Ä–Ω–∏—Ç–µ—Å—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤ –ú–µ–Ω—é",
                                          reply_markup=cart_processing(case="Menu", user_id=id))
                else:
                    del dict_users[id]["–ò–∑–º–µ–Ω—ë–Ω–Ω–∞—è –ö–æ—Ä–∑–∏–Ω–∞"]
                    text = order_info(id, case="current order")
                    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                          text=text, reply_markup=cart_processing(case="show", user_id=id))
        elif operation == "accept":
            text = order_info(id, case="current order")
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text=text, reply_markup=order_accepting(case="confirmation", chat_id=id))
        elif operation == "right":
            bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                          reply_markup=order_accepting(case="Hide", chat_id=id))
            bot.send_message(chat_id=id, text="–ö–∞–∫ –∂–µ–ª–∞–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑?",
                             reply_markup=order_accepting(case="delivery", chat_id=id))

    if flag == 5:
        operation = data[0]
        case, text = "", ""
        if "–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ" not in dict_users[id].keys() or dict_users[id]["–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ"] is None:
            if operation == "by_delivery":
                dict_users[id]["–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ"] = {"–°–ø–æ—Å–æ–± –î–æ—Å—Ç–∞–≤–∫–∏": "–î–æ—Å—Ç–∞–≤–∫–∞"}
            elif operation == "self":
                dict_users[id]["–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ"] = {"–°–ø–æ—Å–æ–± –î–æ—Å—Ç–∞–≤–∫–∏": "–°–∞–º–æ–≤—ã–≤–æ–∑"}
            elif operation == "restaurant":
                dict_users[id]["–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ"] = {"–°–ø–æ—Å–æ–± –î–æ—Å—Ç–∞–≤–∫–∏": "–í –∑–∞–≤–µ–¥–µ–Ω–∏–∏"}
            bot.edit_message_text(chat_id=id, message_id=call.message.message_id,
                                  text="–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
                                  reply_markup=order_accepting(case="Payment", chat_id=id))
        elif operation == "Cash" or operation == "Card":
            if operation == "Cash":
                operation = "–ù–∞–ª–∏—á–Ω—ã–º–∏"
            else:
                operation = "–ö–∞—Ä—Ç–æ–π"
            dict_users[id]["–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ"].update({"–°–ø–æ—Å–æ–± –û–ø–ª–∞—Ç—ã": operation})
            with con:
                is_phone = con.execute(f'SELECT –¢–µ–ª–µ—Ñ–æ–Ω FROM –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ '
                                       f'WHERE "ID TG" = {id}')
                telephone = is_phone.fetchall()[0][0]
                keyboard = None

            if dict_users[id]["–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ"]["–°–ø–æ—Å–æ–± –î–æ—Å—Ç–∞–≤–∫–∏"] == "–î–æ—Å—Ç–∞–≤–∫–∞":
                case, text = "address", "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ\n" + "–∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –≤ —Ä—É—á–Ω—É—é"
                keyboard = order_accepting(case=case, chat_id=id)

            elif dict_users[id]["–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ"]["–°–ø–æ—Å–æ–± –î–æ—Å—Ç–∞–≤–∫–∏"] == "–°–∞–º–æ–≤—ã–≤–æ–∑":
                if telephone is None:
                    case, text = "Hide", "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
                    keyboard = order_accepting(case=case, chat_id=id)
                else:
                    order_to_base(id)
                    text = order_info(id, case="current order")
                    keyboard = None
                    del dict_users[id]["–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ"], dict_users[id]["–ö–æ—Ä–∑–∏–Ω–∞"]

            elif dict_users[id]["–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ"]["–°–ø–æ—Å–æ–± –î–æ—Å—Ç–∞–≤–∫–∏"] == "–í –∑–∞–≤–µ–¥–µ–Ω–∏–∏":
                case, text = "Hide", "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–∏–∫–∞"
                keyboard = order_accepting(case=case, chat_id=id)

            bot.edit_message_text(chat_id=id, message_id=call.message.message_id,
                                  text=text, reply_markup=keyboard)
        elif operation == "Geo":
            bot.delete_message(chat_id=id, message_id=call.message.message_id)
            bot.send_message(chat_id=id, text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ì–µ–æ–ª–æ–∫–∞—Ü–∏—é",
                             reply_markup=order_accepting(case="Geolocation", chat_id=id))
        elif operation == "Manual":
            bot.edit_message_text(chat_id=id, message_id=call.message.message_id,
                                  text="–£–∫–∞–∂–∏—Ç–µ —É–ª–∏—Ü—É",
                                  reply_markup=order_accepting(case="Hide", chat_id=id))
        elif operation == "Yes":
            if "–î–æ–º" not in dict_users[id]["–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ"].keys():
                text = "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–º–∞"
            else:
                text = "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã"
            bot.edit_message_text(chat_id=id, message_id=call.message.message_id, text=text)


print("Telegram started successfully")
bot.infinity_polling()
